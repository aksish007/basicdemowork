
@page "/tasks"
@using TaskManagementSystem.Web.Services
@using TaskManagement.Domain.Entities
@inject TaskService TaskService
@inject ActivityService ActivityService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Tasks</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField @bind-Value="searchString" Placeholder="Search and Hit Enter for Tasks..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="OpenAddDialog">Add Task</MudButton>
    </MudCardContent>
</MudCard>
<br />
<MudTable Elevation="25" Items="tasks" Hover="true" Bordered="true" Striped="true" Filter="new Func<TaskManagement.Domain.Entities.Task, bool>(Search)">
    <HeaderContent>
        <MudTh>Task Name</MudTh>
        <MudTh>Tags</MudTh>
        <MudTh>Due Date</MudTh>
        <MudTh>Assigned To</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Task Name">@context.TaskName</MudTd>
        <MudTd DataLabel="Tags">@context.TagsString</MudTd>
        <MudTd DataLabel="Due Date">@context.DueDate?.ToShortDateString()</MudTd>
        <MudTd DataLabel="Assigned To">@context.AssignedTo</MudTd>
        <MudTd DataLabel="Status">@context.StatusString</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(() => OpenEditDialog(@context))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(() => Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
    </PagerContent>
</MudTable>

@code {
    private string searchString = "";
    private IEnumerable<TaskManagement.Domain.Entities.Task> tasks = new List<TaskManagement.Domain.Entities.Task>();

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        await LoadTasks();
    }

    private async System.Threading.Tasks.Task LoadTasks()
    {
        tasks = await TaskService.GetTasksAsync();
    }

    private async System.Threading.Tasks.Task<TaskManagement.Domain.Entities.Task> LoadActivities(TaskManagement.Domain.Entities.Task task)
    {
        task.Activities = (await ActivityService.GetActivitiesByTaskIdAsync(task.Id)).ToList();
        return task;
    }

    private bool Search(TaskManagement.Domain.Entities.Task task)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (task.TaskName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || task.Tags.Any(tag => tag.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            || (task.AssignedTo != null && task.AssignedTo.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            || (task.StatusString != null && task.StatusString.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        )
        {
            return true;
        }
        return false;
    }

    private void OpenAddDialog()
    {
        OpenDialog(new List<TaskManagement.Domain.Entities.Task> { new TaskManagement.Domain.Entities.Task() });
    }

    private void OpenEditDialog(TaskManagement.Domain.Entities.Task task)
    {
        OpenDialog(new List<TaskManagement.Domain.Entities.Task> { task }, true);
    }

    private async void OpenDialog(List<TaskManagement.Domain.Entities.Task> tasks, bool isEdit = false)
    {
        if (isEdit)
        {
            tasks[0] = await LoadActivities(tasks.FirstOrDefault());
        }
        var parameters = new DialogParameters
        {
            { "Tasks", tasks },
            { "OnTasksSaved", EventCallback.Factory.Create<List<TaskManagement.Domain.Entities.Task>>(this, Save) },
            { "IsEdit", isEdit}
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<TaskDialog>("Task Details", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await LoadTasks();
        }
    }

    private async System.Threading.Tasks.Task Save(TaskManagement.Domain.Entities.Task task)
    {
        await TaskService.UpdateTaskAsync(task);
        await LoadTasks();
    }

    private async System.Threading.Tasks.Task Save(List<TaskManagement.Domain.Entities.Task> tasks)
    {
        foreach (var task in tasks)
        {
            await TaskService.UpdateTaskAsync(task);
        }
        await LoadTasks();
    }


    private async System.Threading.Tasks.Task Delete(int id)
    {
        await TaskService.DeleteTaskAsync(id);
        Snackbar.Add("Task Deleted.", Severity.Success);
        await LoadTasks();
    }
}
